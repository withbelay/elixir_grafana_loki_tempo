# Find eligible builder and runner images on Docker Hub. We use Ubuntu/Debian instead of
# Alpine to avoid DNS resolution issues in production.
#
# https://hub.docker.com/r/hexpm/elixir/tags?page=1&name=ubuntu
# https://hub.docker.com/_/ubuntu?tab=tags
#
# This file is based on these images:
#  This Dockerfile is based on the phoenix recommendations here:
#  https://hexdocs.pm/phoenix/releases.html#containers
#
#   - https://hub.docker.com/r/hexpm/elixir/tags - for the build image
#   - https://hub.docker.com/_/debian?tab=tags&page=1&name=bullseye-20230109-slim - for the release image
#   - https://pkgs.org/ - resource for finding needed packages
#   - Ex: hexpm/elixir:1.14.3-erlang-25.2.1-debian-bullseye-20230109-slim
#
ARG ELIXIR_VERSION=1.15.4
ARG OTP_VERSION=26.0.2
ARG DEBIAN_VERSION=bullseye-20230612-slim

ARG BUILDER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${DEBIAN_VERSION}"
ARG RUNNER_IMAGE="debian:${DEBIAN_VERSION}"
FROM ${BUILDER_IMAGE} as builder
ARG DEPLOY_ENV

# install build dependencies
RUN apt-get update -y && apt-get install -y build-essential git curl gnupg \
    && apt-get clean && rm -f /var/lib/apt/lists/*_*

# install npm
RUN curl -sL https://deb.nodesource.com/setup_18.x  | bash -
RUN apt-get -y install nodejs

# prepare build dir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# set build ENV
ENV MIX_ENV="prod"

COPY mix.exs mix.lock ./
RUN mix deps.get --only ${MIX_ENV}
RUN mkdir config

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY config/config.exs config/${MIX_ENV}.exs config/
RUN mix deps.compile

COPY lib lib
COPY assets assets
COPY priv priv
RUN cd assets && npm install

# compile assets
RUN mix assets.deploy

RUN mix compile_with_sentry

COPY config/runtime.exs config/
COPY config/${DEPLOY_ENV}.exs config/

COPY rel rel
RUN mix release investor_web_${DEPLOY_ENV}

# -----------------------------------------------------------------------
# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
# -----------------------------------------------------------------------

FROM ${RUNNER_IMAGE}
ARG DEPLOY_ENV

RUN apt-get update -y && apt-get install -y libstdc++6 openssl libncurses5 locales \
  && apt-get clean && rm -f /var/lib/apt/lists/*_*

# Set the locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

WORKDIR "/app"
RUN chown nobody /app

# Only copy the final release from the build stage
COPY --from=builder --chown=nobody:root /app/_build/prod/rel/investor_web_${DEPLOY_ENV} ./
RUN mv ./bin/investor_web_${DEPLOY_ENV} ./bin/investor_web

USER nobody

CMD ["/app/bin/server"]
